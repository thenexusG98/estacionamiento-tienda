name: Publicar release de estacionamiento

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-22.04
    env:
      TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
      TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

    steps:
      - name: Clona el repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # Necesario para poder crear y subir tags

      # 1. Obtén el último tag y calcula el siguiente
      - name: Calcula el siguiente tag semver
        id: semver
        run: |
          # Obtén el último tag con formato vX.Y.Z
          LAST_TAG=$(git tag --list "v*" --sort=-v:refname | head -n 1)
          if [[ -z "$LAST_TAG" ]]; then
            LAST_TAG="v0.1.0"
          fi

          # Quita la 'v'
          LAST_VERSION=${LAST_TAG#v}

          # Separa en partes
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LAST_VERSION"

          # Aumenta el patch
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"

          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      # 2. Actualiza package.json a la nueva versión (opcional pero recomendado)
      - name: Actualiza package.json a la nueva versión
        run: |
          jq --arg v "$NEW_VERSION" '.version = $v' package.json > tmp.$$.json && mv tmp.$$.json package.json
          cat package.json

      # 3. Configura git para push autenticado
      - name: Configura git para push autenticado
        run: |
          git config user.name "thenexusG98"
          git config user.email "capitanuri@gmail.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}

      # 4. Crea y sube el nuevo tag solo si no existe
      - name: Crea y sube el nuevo tag si no existe
        run: |
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "El tag $NEW_TAG ya existe, no se crea uno nuevo."
          else
            git add package.json
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]" || echo "Nada que commitear"
            git tag "$NEW_TAG"
            git push origin "$NEW_TAG"
            git push origin main
            echo "Tag $NEW_TAG creado y subido."
          fi

      # Resto de pasos de build y release...
      - name: Instala dependencias de sistema para Tauri
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            squashfs-tools \
            pkg-config

      - name: Instala Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Instala Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Limpieza profunda de Rust y Node
        run: |
          cd src-tauri
          rm -rf target
          rm -f Cargo.lock
          cargo update
          cargo clean
          cd ..
          rm -rf node_modules

      - name: Instala dependencias de Node.js
        working-directory: src-tauri
        run: npm install

      - name: Instala Tauri CLI
        working-directory: src-tauri
        run: npm install -g @tauri-apps/cli

      - name: Debug TAURI_SIGNING_PRIVATE_KEY
        run: |
          if [ -z "$TAURI_SIGNING_PRIVATE_KEY" ]; then
            echo "TAURI_SIGNING_PRIVATE_KEY NO está presente. El secreto no fue leído."
            exit 1
          else
            echo "TAURI_SIGNING_PRIVATE_KEY está presente."
            head -n 2 <<< "$TAURI_SIGNING_PRIVATE_KEY"
          fi

      - name: Compila el instalador MSI (Tauri build)
        working-directory: src-tauri
        run: npm run tauri build

      - name: Genera latest.json con la versión del tag
        run: node scripts/generate-latest-json.js
        env:
          APP_VERSION: ${{ env.NEW_TAG }}

      - name: Verifica archivos
        run: |
          ls -lh src-tauri/target/release/bundle/msi/ || true
          [ -f src-tauri/latest.json ] && cat src-tauri/latest.json || echo "No latest.json"

      - name: Sube archivos a GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          files: |
            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/latest.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}